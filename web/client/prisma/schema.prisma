generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  clerkUserId      String           @unique
  firstName        String?
  lastName         String?
  imageUrl         String?
  bio              String?
  publicKey        String?
  privateKey       String?
  limit            Int              @default(5)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  githubProjects   GithubProject[]
  sharedProjects   GithubShared[]         @relation("SharedWith")
  sharedByProjects GithubShared[]         @relation("SharedBy")
  notifications    Notification[]
}


model GithubShared {
  id               String           @id @default(cuid())
  githubProjectId  String
  userIdFrom       String
  userIdTo         String
  isAccepted       Boolean          @default(false)
  privilege        Privilege
  project          GithubProject    @relation(fields: [githubProjectId], references: [id])
  userFrom         User             @relation("SharedBy", fields: [userIdFrom], references: [clerkUserId])
  userTo           User             @relation("SharedWith", fields: [userIdTo], references: [clerkUserId])
  createdAt        DateTime         @default(now())
}

model Notification {
  id               String           @id @default(cuid())
  userId           String
  message          String
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [clerkUserId])
}

model GithubProject {
  id               String           @id @default(cuid())
  name             String
  slug             String           @unique
  link             String?
  userId           String
  user             User             @relation(fields: [userId], references: [clerkUserId])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  githubService    GithubService[]
  githubShared     GithubShared[]
  files            GithubFile[]     
}

model GithubFile {
  id               String        @id @default(uuid())
  name             String
  encryptedContent String        @db.Text
  extension        String
  type             String
  project          GithubProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model GithubService {
  id               String           @id @default(cuid())
  name             String
  value            String
  link             String
  expDate          String
  githubProjectId  String
  githubProject    GithubProject    @relation(fields: [githubProjectId], references: [id])
  createdAt        DateTime         @default(now())
}


enum Privilege {
  READ
  WRITE
}
